@page "/timesheet"
@page "/timesheet/{year:int}/{week:int}"

@using Microsoft.AspNetCore.SignalR.Client
@using TimeReport.Client
@using System.Globalization

@implements IDisposable
@inject ISnackbar Snackbar
@inject IUsersClient UsersClient
@inject ITimeSheetsClient TimeSheetsClient
@inject IActivitiesClient ActivitiesClient
@inject IDialogService DialogService
@inject NavigationManager NavigationManager

@if (ActivitiesModels is not null && Year is not null && Week is not null)
{
    <MudText Typo="Typo.h3" Align="Align.Center" GutterBottom="true">Week @Week - @Year</MudText>

    <div class="mb-4">
        <MudButton Variant="@Variant.Filled" Class="me-2" StartIcon="@Icons.Material.Filled.ChevronLeft" Link="@PreviousWeekLink()">Previous week</MudButton>
        <MudButton Variant="@Variant.Filled" EndIcon="@Icons.Material.Filled.ChevronRight" Link="@NextWeekLink()">Next week</MudButton>
    </div>

    <EditForm Model="@this">
        <ObjectGraphDataAnnotationsValidator />

        <MudTable T="ActivityModel" Items="ActivitiesModels" Hover="true" Loading="@isLoading"
                  GroupBy="@_groupDefinition">

            <ToolBarContent>
                <MudButton Variant="@Variant.Filled" Color="Color.Primary" Class="me-2" StartIcon="@Icons.Material.Filled.Add" OnClick="NewActivity">New activity</MudButton>
                @if (Users is not null)
                {
                    <MudSelect Label="User" Variant="Variant.Outlined" Class="me-2" Margin="Margin.Dense" Value="User" ValueChanged="async (UserDto v) => await OnUserChanged(v)" ToStringFunc="GetUsersName"
                               For="() => User">
                        @foreach (var user in Users)
                        {
                            <MudSelectItem Value="@user" />
                        }
                    </MudSelect>
                }
                <MudButton StartIcon="@Icons.Material.Filled.List">Templates</MudButton>
                <MudSpacer />
                <MudText Typo="@Typo.body1" Class="ms-4 me-2"><b>Status:</b> </MudText>
                <MudText Typo="@Typo.body1" Class="me-4">Open</MudText>
                <MudIconButton Icon="@Icons.Material.Filled.Close"></MudIconButton>
            </ToolBarContent>

            <HeaderContent>
                <MudTh colspan="2">
                    Activity
                </MudTh>
                @foreach (var date in DateTimeHelpers.GetDatesInWeek(Year.GetValueOrDefault(), Week.GetValueOrDefault()))
                {
                    <MudTh>
                        @date.DayOfWeek.ToString().Substring(0, 3)
                        <MudText Typo="Typo.subtitle1">@date.ToShortDateString()</MudText>
                    </MudTh>
                }
                <MudTh></MudTh>
            </HeaderContent>

            <GroupHeaderTemplate Context="c">
                <MudTh Class="mud-table-cell-custom-group" colspan="10">
                    <MudText Typo="Typo.h6">@($"{((dynamic)c.Key).Name}")</MudText>
                </MudTh>
            </GroupHeaderTemplate>

            <RowTemplate Context="activityLine">
                <MudTd colspan="2" DataLabel="Activity">
                    @activityLine.Activity.Name
                </MudTd>
                @foreach (var entry in activityLine.Entries)
                {
                    <MudTd DataLabel="@entry.Date.DayOfWeek.ToString()">
                        <div @onclick="() => FocusEntry(activityLine, entry)">
                            <MudNumericField T="double?" Class="@((IsWeekend(entry.Date) ? "weekendEntry" : null) + " " + IsEntrySelectedCss(entry))" Value="entry.Hours" ValueChanged="(value) => OnHoursChanged(value, activityLine, entry)" Variant="Variant.Filled" Margin="Margin.Dense" HideSpinButtons="true" />
                        </div>
                    </MudTd>
                }
                <MudTd>
                    <MudIconButton Icon="@Icons.Material.Filled.Delete" OnClick="async () => await DeleteActivity(activityLine)" />
                </MudTd>
            </RowTemplate>

            <NoRecordsContent>
                <MudText>No matching records found</MudText>
            </NoRecordsContent>

            <LoadingContent>
                <MudText>Loading...</MudText>
            </LoadingContent>

        </MudTable>

        @if (selectedEntry is not null)
        {
            <MudCard Class="mt-4">
                <MudCardContent>
                    <MudText Typo="@Typo.h6" Class="mb-2">@selectedActivity.Activity.Project.Name: @selectedActivity.Activity.Name - @selectedEntry.Date.ToShortDateString()</MudText>
                    <MudTextField T="string?" Value="selectedEntry.Description" ValueChanged="(value) => OnDescriptionChanged(value, selectedActivity, selectedEntry)" Variant="Variant.Filled" Label="Description" Lines="3" />
                </MudCardContent>
            </MudCard>
        }
    </EditForm>
}

@code {
    bool isLoading = false;
    TimeSheetDto timeSheet;
    IEnumerable<ActivityDto> activities = null;

    UserDto? User { get; set; }
    IEnumerable<UserDto> Users { get; set; } = null;

    List<ActivityModel>? ActivitiesModels { get; } = new List<ActivityModel>();

    ActivityModel? selectedActivity;
    EntryModel? selectedEntry;

    [Parameter]
    public int? Year { get; set; }

    [Parameter]
    public int? Week { get; set; }

    protected override async Task OnInitializedAsync()
    {
        NavigationManager.LocationChanged += OnLocationChanged;

        try
        {
            Users = await UsersClient.GetUsersAsync();
            User = Users.FirstOrDefault();

            activities = await ActivitiesClient.GetActivitiesAsync(null);
        }
        catch (Exception e)
        {
            Snackbar.Add("Could not load data from server.", Severity.Error);
            return;
        }

        await LoadTimeSheet();

        StateHasChanged();
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }

    async void OnLocationChanged(object? sender, LocationChangedEventArgs eventArgs)
    {
        await LoadTimeSheet();

        StateHasChanged();
    }

    protected async Task LoadTimeSheet()
    {
        selectedActivity = null;
        selectedEntry = null;
        ActivitiesModels.Clear();

        isLoading = true;

        var date = DateTime.Now.Date;

        if (Year is null && Week is null)
        {
            Year = date.Year;
            Week = date.GetCurrentWeek();
        }

        try
        {
            timeSheet = await TimeSheetsClient.GetTimeSheetForWeekAsync(Year.GetValueOrDefault(), Week.GetValueOrDefault(), User.Id);
        }
        catch (Exception e)
        {
            Snackbar.Add("Failed to download timesheet", Severity.Error);
            isLoading = false;
            return;
        }

        foreach (var activity in timeSheet.Activities)
        {
            var activityModel = new ActivityModel
            {
                Activity = activities.FirstOrDefault(x => x.Id == activity.Id)
            };

            activity.Entries = activity.Entries.OrderBy(x => x.Date).ToList();

            ActivitiesModels.Add(activityModel);

            foreach (var dayDate in DateTimeHelpers.GetDatesInWeek(DateTime.Now.Year, Week.GetValueOrDefault()))
            {
                var entry = activity.Entries.FirstOrDefault(x => x.Date.Date == dayDate.Date);

                EntryModel? entryModel = null;

                if (entry is null)
                {
                    entryModel = new EntryModel
                    {
                        Id = null,
                        Date = dayDate,
                        Hours = null
                    };

                    activityModel.Entries.Add(entryModel);

                    continue;
                }

                entryModel = new EntryModel
                {
                    Id = entry.Id,
                    Date = entry.Date.Date,
                    Hours = entry.Hours,
                    Description = entry.Description
                };

                activityModel.Entries.Add(entryModel);
            }
        }

        isLoading = false;
    }

    async Task NewActivity()
    {
        DialogParameters parameters = new();
        //parameters.Add(nameof(NewTimeSheetActivityDialog.Activities), activities);
        parameters.Add(nameof(NewTimeSheetActivityDialog.Year), Year);
        parameters.Add(nameof(NewTimeSheetActivityDialog.Week), Week);

        var dialogRef = DialogService.Show<NewTimeSheetActivityDialog>("New activity", parameters);
        var dialogResult = await dialogRef.Result;

        if (dialogResult.Cancelled)
            return;

        var obj = (ActivityModel)dialogResult.Data;

        if (ActivitiesModels.Any(x => x.Activity.Id == obj.Activity.Id))
        {
            Snackbar.Add("Activity has already been added.", Severity.Info);
            return;
        }

        ActivitiesModels.Add(obj);
    }

    async Task DeleteActivity(ActivityModel activityLine)
    {
        var result = await DialogService.ShowMessageBox("Delete activity?", "This will delete all entries for this activity. Are you sure?", "Yes", "No");

        if (!result.GetValueOrDefault())
            return;

        try
        {
            await TimeSheetsClient.DeleteActvityEntriesAsync(timeSheet.Id, activityLine.Activity.Id);

            ActivitiesModels.Remove(activityLine);
        }
        catch (Exception)
        {
            Snackbar.Add("Failed to delete activity", Severity.Error);
        }
    }

    string GetUsersName(UserDto user) => !String.IsNullOrEmpty(user.DisplayName) ? user?.DisplayName : $"{user.FirstName} {user?.LastName}";

    async Task OnUserChanged(UserDto user)
    {
        User = user;
        await LoadTimeSheet();
    }

    private TableGroupDefinition<ActivityModel> _groupDefinition = new()
    {
        GroupName = "Project",
        Indentation = false,
        Expandable = true,
        Selector = (e) => new { e.Activity.Project.Id, e.Activity.Project.Name }
    };

    string? IsEntrySelectedCss(EntryModel entry)
    {
        if (entry == selectedEntry) return "selected";

        return null;
    }

    void FocusEntry(ActivityModel activity, EntryModel entry)
    {
        selectedActivity = activity;
        selectedEntry = entry;
    }

    string PreviousWeekLink()
    {
        if (Week == 1)
        {
            return $"/Timesheet/{Year - 1}/{52}";
        }

        return $"/Timesheet/{Year}/{Week - 1}";
    }

    string NextWeekLink()
    {
        if (Week == 52)
        {
            return $"/Timesheet/{Year + 1}/{1}";
        }

        return $"/Timesheet/{Year}/{Week + 1}";
    }

    async Task OnHoursChanged(double? value, ActivityModel activity, EntryModel entry)
    {
        try
        {
            if (entry.Id is null)
            {
                var a = activity.Activity;

                var result = await TimeSheetsClient.CreateEntryAsync(timeSheet.Id, new CreateEntryDto
                {
                    ProjectId = a.Project.Id,
                    ActivityId = a.Id,
                    Date = entry.Date,
                    Hours = value,
                    Description = entry.Description
                });

                entry.Id = result.Id;
            }
            else
            {
                await TimeSheetsClient.UpdateEntryAsync(timeSheet.Id, entry.Id, new UpdateEntryDto
                {
                    Hours = value,
                    Description = entry.Description
                });
            }

            entry.Hours = value;
        }
        catch (ApiException<ProblemDetails> exc)
        {
            Snackbar.Add(exc.Result.Detail, Severity.Error);
        }
        catch
        {
            Snackbar.Add("Failed to update hours", Severity.Error);
        }
    }

    async Task OnDescriptionChanged(string? value, ActivityModel activity, EntryModel entry)
    {
        try
        {
            if (entry.Id is null)
            {
                var a = activity.Activity;

                var result = await TimeSheetsClient.CreateEntryAsync(timeSheet.Id, new CreateEntryDto
                {
                    ProjectId = a.Project.Id,
                    ActivityId = a.Id,
                    Date = entry.Date,
                    Hours = null,
                    Description = value
                });

                entry.Id = result.Id;
            }
            else
            {
                await TimeSheetsClient.UpdateEntryDetailsAsync(timeSheet.Id, entry.Id, new UpdateEntryDetailsDto
                {
                    Description = value
                });
            }

            entry.Description = value;
        }
        catch
        {
            Snackbar.Add("Failed to update description", Severity.Error);
        }
    }

    bool IsWeekend(DateTime date) => date.DayOfWeek == DayOfWeek.Saturday || date.DayOfWeek == DayOfWeek.Sunday;

}