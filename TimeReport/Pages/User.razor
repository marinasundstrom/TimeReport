@page "/users/{userId}"
@inject NavigationManager NavigationManager
@inject IDialogService DialogService
@inject IUsersClient UsersClient

@if (user is not null)
{
    <MudText Typo="Typo.h3" Align="Align.Center" GutterBottom="true">@user.FirstName @user.LastName</MudText>

    <MudText Typo="Typo.h4" Align="Align.Center" GutterBottom="true" Class="mt-6">Projects</MudText>

    <MudTable T="ProjectMembershipDto" ServerData="@(new Func<TableState, Task<TableData<ProjectMembershipDto>>>(ServerReload2))"
              Hover="true" @ref="table2" Class="mt-4" OnRowClick="(e) => GotToProject(e.Item)">
        <HeaderContent>
            <MudTh><MudTableSortLabel T="ProjectMembershipDto" SortLabel="Project.Name">Project</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel T="ProjectMembershipDto" SortLabel="Project.Description">Description</MudTableSortLabel></MudTh>
            <MudTh></MudTh>
        </HeaderContent>
        <RowTemplate Context="membership">
            <MudTd DataLabel="Name">@membership.Project.Name</MudTd>
            <MudTd DataLabel="Name">@membership.Project.Description</MudTd>
        </RowTemplate>
        <NoRecordsContent>
            <MudText>No matching records found</MudText>
        </NoRecordsContent>
        <LoadingContent>
            <MudText>Loading...</MudText>
        </LoadingContent>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>

    @if (data is not null)
    {
        <MudPaper Class="pa-16 ma-2 mt-8">

            <MudText Typo="Typo.h6" Align="Align.Center" GutterBottom="true">Project hours per month</MudText>

            <MudChart Class="mt-8" ChartType="ChartType.Bar" ChartSeries="@Series" XAxisLabels="@XAxisLabels" Width="100%" Height="350" ChartOptions="options"></MudChart>

        </MudPaper>
    }

    @if (statisticsSummary is not null)
    {
        <StatisticsSummaryView Entries="statisticsSummary.Entries" />
    }
}

@code {
    bool isLoading = false;
    UserDto user;
    MudTable<ProjectMembershipDto> table2;
    StatisticsSummary statisticsSummary;

    Data? data;

    private ChartOptions options = new ChartOptions()
    {
        YAxisFormat = "0 h",
        YAxisTicks = 10
    };
    public List<ChartSeries> Series = new List<ChartSeries>();
    public string[] XAxisLabels = new string[0];

    [Parameter] public string UserId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        user = await UsersClient.GetUserAsync(UserId);

        data = await UsersClient.GetStatisticsAsync(UserId, null, null);

        XAxisLabels = data.Labels.ToArray();

        foreach (var d in data.Series)
        {
            Series.Add(new ChartSeries() { Name = d.Name, Data = d.Data.Select(x => (double)x).ToArray() });
        }

        statisticsSummary = await UsersClient.GetStatisticsSummaryAsync(UserId);
    }

    private async Task<TableData<ProjectMembershipDto>> ServerReload2(TableState state)
    {
        var result = await UsersClient.GetProjectMembershipsAsync(UserId, state.Page, state.PageSize,
            state.SortLabel, state.SortDirection == MudBlazor.SortDirection.None ? null : state.SortDirection == MudBlazor.SortDirection.Descending ? TimeReport.Client.SortDirection.Desc : TimeReport.Client.SortDirection.Asc);

        return new TableData<ProjectMembershipDto>() { TotalItems = result.TotalItems, Items = result.Items };
    }

    private void GotToProject(ProjectMembershipDto membership)
    {
        NavigationManager.NavigateTo($"/projects/{membership.Project.Id}");
    }
}

