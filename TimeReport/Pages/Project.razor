@page "/projects/{projectId}"
@inject NavigationManager NavigationManager
@inject IDialogService DialogService
@inject IActivitiesClient ActivitiesClient
@inject IProjectsClient ProjectsClient

@if (project is not null)
{
    <MudText Typo="Typo.h3" Align="Align.Center" GutterBottom="true">@project.Name</MudText>

    <MudPaper Class="pa-16 ma-2">

        <MudText Typo="Typo.h6" Align="Align.Center" GutterBottom="true">Activity hours per month</MudText>

        <MudChart Class="mt-8" ChartType="ChartType.Bar" ChartSeries="@Series" XAxisLabels="@XAxisLabels" Width="100%" Height="350" ChartOptions="options"></MudChart>

    </MudPaper>

    <MudText Typo="Typo.h4" Align="Align.Center" GutterBottom="true" Class="mt-6">Activities</MudText>

    <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" OnClick="OnNewActivityClicked">New activity</MudButton>

    <MudTable T="ActivityDto" ServerData="@(new Func<TableState, Task<TableData<ActivityDto>>>(ServerReload))"
              Hover="true" @ref="table" Class="mt-4">
        <HeaderContent>
            <MudTh>Name</MudTh>
            <MudTh>Description</MudTh>
            <MudTh></MudTh>
        </HeaderContent>
        <RowTemplate Context="activity">
            <MudTd DataLabel="Name">@activity.Name</MudTd>
            <MudTd DataLabel="Description">@activity.Description</MudTd>
            <MudTd>
                <MudIconButton Icon="@Icons.Material.Filled.Edit" OnClick="async () => await OnEditActivityClicked(activity)" />
                @* <MudIconButton Icon="@Icons.Material.Filled.Delete" OnClick="async () => await DeleteOption(option)" /> *@
            </MudTd>
        </RowTemplate>
        <NoRecordsContent>
            <MudText>No matching records found</MudText>
        </NoRecordsContent>
        <LoadingContent>
            <MudText>Loading...</MudText>
        </LoadingContent>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>

    <MudText Typo="Typo.h4" Align="Align.Center" GutterBottom="true" Class="mt-6">Members</MudText>

    <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" OnClick="OnAddMembershipClicked">New member</MudButton>

    <MudTable T="ProjectMembershipDto" ServerData="@(new Func<TableState, Task<TableData<ProjectMembershipDto>>>(ServerReload2))"
              Hover="true" @ref="table2" Class="mt-4">
        <HeaderContent>
            <MudTh>Name</MudTh>
            <MudTh></MudTh>
        </HeaderContent>
        <RowTemplate Context="membership">
            <MudTd DataLabel="Name">@membership.User.FirstName @membership.User.LastName</MudTd>
            <MudTd>
                <MudIconButton Icon="@Icons.Material.Filled.Edit" OnClick="async () => await OnEditMembershipClicked(membership)" />
                @* <MudIconButton Icon="@Icons.Material.Filled.Delete" OnClick="async () => await DeleteOption(option)" /> *@
            </MudTd>
        </RowTemplate>
        <NoRecordsContent>
            <MudText>No matching records found</MudText>
        </NoRecordsContent>
        <LoadingContent>
            <MudText>Loading...</MudText>
        </LoadingContent>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>
}

@code {
    ProjectDto? project;
    Data? data;
    MudTable<ActivityDto> table;
    MudTable<ProjectMembershipDto> table2;

    private ChartOptions options = new ChartOptions()
    {
        YAxisFormat = "0 h",
        YAxisTicks = 10
    };
    public List<ChartSeries> Series = new List<ChartSeries>();
    public string[] XAxisLabels = new string[0];

    [Parameter]
    public string ProjectId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        project = await ProjectsClient.GetProjectAsync(ProjectId);
        data = await ProjectsClient.GetProjectStatisticsAsync(ProjectId);

        XAxisLabels = data.Labels.ToArray();

        foreach (var d in data.Series)
        {
            Series.Add(new ChartSeries() { Name = d.Name, Data = d.Data.Select(x => (double)x).ToArray() });
        }
    }

    private async Task<TableData<ActivityDto>> ServerReload(TableState state)
    {
        var result = await ActivitiesClient.GetActivitiesAsync(ProjectId);

        return new TableData<ActivityDto>() { TotalItems = result.Count(), Items = result };
    }

    private async Task<TableData<ProjectMembershipDto>> ServerReload2(TableState state)
    {
        var result = await ProjectsClient.GetProjectMembershipsAsync(ProjectId);

        return new TableData<ProjectMembershipDto>() { TotalItems = result.Count(), Items = result };
    }

    private async Task OnNewActivityClicked()
    {
        DialogParameters parameters = new();
        parameters.Add(nameof(ActivityDialog.ProjectId), project.Id);

        var dialogRef = DialogService.Show<ActivityDialog>("New activity", parameters);

        var dialogResult = await dialogRef.Result;

        if (dialogResult.Cancelled)
            return;

        table.ReloadServerData();
    }

    private async Task OnEditActivityClicked(ActivityDto activity)
    {
        DialogParameters parameters = new();
        parameters.Add(nameof(ActivityDialog.ActivityId), activity.Id);

        var dialogRef = DialogService.Show<ActivityDialog>($"Edit {activity.Name}", parameters);

        var dialogResult = await dialogRef.Result;

        if (dialogResult.Cancelled)
            return;

        table.ReloadServerData();
    }

    private async Task OnAddMembershipClicked()
    {
        DialogParameters parameters = new();
        parameters.Add(nameof(MembershipDialog.ProjectId), project.Id);

        var dialogRef = DialogService.Show<MembershipDialog>("New membership", parameters);

        var dialogResult = await dialogRef.Result;

        if (dialogResult.Cancelled)
            return;

        table2.ReloadServerData();
    }

    private async Task OnEditMembershipClicked(ProjectMembershipDto membership)
    {
        DialogParameters parameters = new();
        parameters.Add(nameof(MembershipDialog.ProjectId), membership.Projects.Id);
        parameters.Add(nameof(MembershipDialog.MembershipId), membership.Id);

        var dialogRef = DialogService.Show<MembershipDialog>($"Edit membership", parameters);

        var dialogResult = await dialogRef.Result;

        if (dialogResult.Cancelled)
            return;

        table2.ReloadServerData();
    }
}
