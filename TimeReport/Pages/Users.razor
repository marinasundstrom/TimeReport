@page "/users"
@inject NavigationManager NavigationManager
@inject IDialogService DialogService
@inject IUsersClient UsersClient

<MudText Typo="Typo.h3" Align="Align.Center" GutterBottom="true">Users</MudText>

<MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" OnClick="OnNewUserClicked">New User</MudButton>

<MudTable T="UserDto" ServerData="@(new Func<TableState, Task<TableData<UserDto>>>(ServerReload))"
          Hover="true" @ref="table" Class="mt-4" OnRowClick="(e) => GotToUser(e.Item)">
    <ToolBarContent>
        <MudSpacer />
        <MudTextField T="string" ValueChanged="@(s => OnSearch(s))" Placeholder="Search" Adornment="Adornment.Start" Immediate="true" DebounceInterval="500"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh><MudTableSortLabel T="UserDto" SortLabel="FirstName">First Name</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel T="UserDto" SortLabel="LastName">Last Name</MudTableSortLabel></MudTh>
        <MudTh>Display Name</MudTh>
        <MudTh><MudTableSortLabel T="UserDto" SortLabel="Ssn">SSN</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel T="UserDto" SortLabel="Email">Email</MudTableSortLabel></MudTh>
        <MudTh></MudTh>
    </HeaderContent>
    <RowTemplate Context="user">
        <MudTd DataLabel="First Name">@user.FirstName</MudTd>
        <MudTd DataLabel="Last Name">@user.LastName</MudTd>
        <MudTd DataLabel="Last Name">@user.DisplayName</MudTd>
        <MudTd DataLabel="SSN">@user.Ssn</MudTd>
        <MudTd DataLabel="Email">@user.Email</MudTd>
        <MudTd>
            <MudIconButton Icon="@Icons.Material.Filled.Edit" OnClick="async () => await OnEditUserClicked(user)" />
            @* <MudIconButton Icon="@Icons.Material.Filled.Delete" OnClick="async () => await DeleteOption(option)" /> *@
        </MudTd>
    </RowTemplate>
    <NoRecordsContent>
        <MudText>No matching records found</MudText>
    </NoRecordsContent>
    <LoadingContent>
        <MudText>Loading...</MudText>
    </LoadingContent>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

@code {
    MudTable<UserDto> table;
    string searchString;

    protected override async Task OnInitializedAsync()
    {

    }

    private async Task<TableData<UserDto>> ServerReload(TableState state)
    {
        var page = await UsersClient.GetUsersAsync(state.Page, state.PageSize, searchString,
            state.SortLabel, state.SortDirection == MudBlazor.SortDirection.None ? null : state.SortDirection == MudBlazor.SortDirection.Descending ? TimeReport.Client.SortDirection.Desc : TimeReport.Client.SortDirection.Asc);

        return new TableData<UserDto>() { TotalItems = page.TotalItems, Items = page.Items };
    }

    private void OnSearch(string text)
    {
        searchString = text;
        table.ReloadServerData();
    }

    private void GotToUser(UserDto user)
    {
        NavigationManager.NavigateTo($"/users/{user.Id}");;
    }

    private async Task OnNewUserClicked()
    {
        var dialogRef = DialogService.Show<UserDialog>("New User");

        var dialogResult = await dialogRef.Result;

        if (dialogResult.Cancelled)
            return;

        searchString = null;
        table.ReloadServerData();
    }

    private async Task OnEditUserClicked(UserDto user)
    {
        DialogParameters parameters = new();
        parameters.Add(nameof(UserDialog.UserId), user.Id);

        var dialogRef = DialogService.Show<UserDialog>($"Edit {user.FirstName}", parameters);

        var dialogResult = await dialogRef.Result;

        if (dialogResult.Cancelled)
            return;

        table.ReloadServerData();
    }
}
